values_to = "Value")
fulldata$commute <- ifelse(grepl("_CountLA",fulldata$Virus),'local_count',
ifelse(grepl("_CountIMP",fulldata$Virus),'imp_count',
ifelse(grepl("_IRIMP",fulldata$Virus),'imp_IR',
ifelse(grepl("_IRLA",fulldata$Virus),'la_IR','na'))))
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(sf)
library(broom)
library(readxl)
library(rgdal)
library(themis)
library(leaflet)
library(openxlsx)
library(geosphere)
fulldata <- read_csv("~/Desktop/Internship/Documents/fulldata.csv") %>%
pivot_longer(cols = c(35 : 55), #BFV_CountLA to CHIKV_CountIMP
names_to = "Virus",
values_to = "Value")
fulldata$commute <- ifelse(grepl("_CountLA",fulldata$Virus),'local_count',
ifelse(grepl("_CountIMP",fulldata$Virus),'imp_count',
ifelse(grepl("_IRIMP",fulldata$Virus),'imp_IR',
ifelse(grepl("_IRLA",fulldata$Virus),'local_IR','na'))))
# fulldata$commute <- ifelse(grepl("_CountLA",fulldata$Virus),'local_count',
#                            ifelse(grepl("_CountIMP",fulldata$Virus),'imp_count','na'))
#
#
# fulldata$IR <- ifelse(grepl("_IRIMP",fulldata$Virus),'imp_IR',
#                                          ifelse(grepl("_IRLA",fulldata$Virus),'la_IR','na'))
View(fulldata)
fulldata <- read_csv("~/Desktop/Internship/Documents/fulldata.csv") %>%
pivot_longer(cols = c("BFV_CountLA" : "CHIKV_CountIMP"), #BFV_CountLA to CHIKV_CountIMP
names_to = "Virus",
values_to = "Value")
fulldata$commute <- ifelse(grepl("_CountLA",fulldata$Virus),'local_count',
ifelse(grepl("_CountIMP",fulldata$Virus),'imp_count',
ifelse(grepl("_IRIMP",fulldata$Virus),'imp_IR',
ifelse(grepl("_IRLA",fulldata$Virus),'local_IR','na'))))
# fulldata$commute <- ifelse(grepl("_CountLA",fulldata$Virus),'local_count',
#                            ifelse(grepl("_CountIMP",fulldata$Virus),'imp_count','na'))
#
#
# fulldata$IR <- ifelse(grepl("_IRIMP",fulldata$Virus),'imp_IR',
#                                          ifelse(grepl("_IRLA",fulldata$Virus),'la_IR','na'))
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(sf)
library(broom)
library(readxl)
library(rgdal)
library(themis)
library(leaflet)
library(openxlsx)
library(geosphere)
# full_data <- read_csv(file.choose())
# SA3 Shape File
shapefile_df <- readOGR(dsn = paste0(getwd(), "/Data/SA3_2011/")) %>%
fortify(region = "SA3_NAME11") %>%
rename(alat = lat,
along = long,
aname = id)
# World Data Shape File
world_df <- readOGR(
dsn= paste0(getwd(),"/DATA/World_Shapefile/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE) %>% fortify(region = "NAME") %>%
rename(wlat = lat,
wlong = long,
wname = id)
imported <- file.choose()
virus_list <-  c("Dengue",
"West_Nile_Kunjin",
"Zika",
"Chikungunya",
"Japanese_Encephalitis_Virus")
connection_data <- data.frame()
for(i in 1:5)
{
connection_data <- rbind(connection_data, read_excel(imported, sheet = i) %>%
add_column(Virus = virus_list[i]))
}
connection_data <- connection_data %>%
filter(!`Country of Origin` %in% c("No data available", "Overseas - Country unknown",
"At Sea", "Unknown", "No data supplied", "Australia") &
!`Residential location (SA3)` %in% c("No data available", "Overseas - Country unknown",
"At Sea", "No data supplied", "Unknown")) %>%
mutate(`Country of Origin` =
ifelse(`Country of Origin` =="China (excludes SARs and Taiwan)", "China",
ifelse(`Country of Origin` == "Venezuela, Bolivarian Republic of", "Venezuela",
ifelse(`Country of Origin` == "Samoa, American", "Samoa",
ifelse(`Country of Origin` == "Bolivia, Plurinational State of", "Bolivia",
ifelse(`Country of Origin` == "Congo, Democratic Republic of", "Congo",
ifelse(`Country of Origin` == "Macau (SAR of China)", "Macau",
ifelse(`Country of Origin` == "United Kingdom, Channel Islands and Isle of Man", "United Kingdom",
ifelse(`Country of Origin` == "Hong Kong (SAR of China)", "Hong Kong",
ifelse(`Country of Origin` == "Congo, Republic of", "Congo",
ifelse(`Country of Origin` == "Myanmar, The Republic of the Union of", "Myanmar", `Country of Origin`)))))))))))
connection_data <- connection_data[!grepl("nfd|nec", connection_data$`Country of Origin`),]
# # Binding shape files
# joint_data <- rbind(world_df, shapefile_df)
#
# ggplot() +
# geom_path(data = joint_data,
#           aes(x = long, y = lat, group = group),
#           color = 'Dark Green', size = .2)
final_map_data <- connection_data %>%
group_by(Virus, `Country of Origin`) %>%
summarise(count = sum(Count)) %>%
inner_join(. , world_df, by=c("Country of Origin"="wname"))%>%
group_by(Virus, `Country of Origin`) %>%
summarise(wlat = mean(wlat),
wlong = mean(wlong),
count  = mean(count)) %>%
rename(wname = "Country of Origin") %>%
filter(Virus == "Zika")
content <- paste(sep = "<br/>",
"Virus Imported from: ", "<b>", final_map_data$wname, "</b>",
"Type of Virus: ",  "<b>", final_map_data$`Virus`, "</b>",
"Total Imported Cases: ", "<b>", final_map_data$`count`, "</b>")
connection_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
label = "Australia",
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map
gc_intermediate <- data.frame()
for (i in 1:nrow(final_map_data)){
dataframe1 <- cbind(gcIntermediate(c(final_map_data$wlong[i],final_map_data$wlat[i]), c(137,-23.2),
n=100,
addStartEnd=TRUE,
sp=TRUE) , group = i)
gc_intermediate <- rbind(gc_intermediate,dataframe1)
}
n=100,
<- gcIntermediate(c(final_map_data$wlong[11],final_map_data$wlat[11]), c(137,-23.2),
library(tidyverse)
library(ggplot2)
library(sf)
library(broom)
library(readxl)
library(rgdal)
library(themis)
library(leaflet)
library(openxlsx)
library(geosphere)
a <- gcIntermediate(c(final_map_data$wlong[11],final_map_data$wlat[11]), c(137,-23.2),
n=100,
addStartEnd=TRUE,
sp=TRUE)
a %>%
leaflet()  %>% addTiles() %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
label = "Australia",
labelOptions = labelOptions(noHide = T)) %>%
addPolylines()
a <- gcIntermediate(c(final_map_data$wlong[11],final_map_data$wlat[11]), c(137,-23.2),
n=100,
addStartEnd=FALSE,
sp=TRUE)
a %>%
leaflet()  %>% addTiles() %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
label = "Australia",
labelOptions = labelOptions(noHide = T)) %>%
addPolylines()
# addPolylines(lng = c(final_map_data$wlong[i], 137), lat=c(final_map_data$wlat[i], -23.2), weight=1, opacity=3, color="white")
abs(final_map_data$wlong[11]) + abs(final_map_data$wlat[11])
abs(inal_map_data$wlong[11]) + abs(137)
abs(final_map_data$wlong[11]) + abs(137)
?lines()
connection_map %>%  setView(137, -23.2, zoom = 2)
connection_map %>%  setView(137, -23.2, zoom = 5)
connection_map %>%  setView(137, -23.2, zoom = 1)
connection_map %>%  setView(0, 0, zoom = 1)
connection_map %>%  setView(0, 0, zoom = 1.8)
connection_map %>%  setView(0, 0, zoom = 1.6)
connection_map %>%  setView(0, 0, zoom = 1.2)
connection_map %>%  setView(0, 0, zoom = 1.4)
connection_map %>%  setView(0, 0, zoom = 1.5)
connection_map %>%  setView(0, 0, zoom = 1.47)
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map %>%  setView(0, 0, zoom = 1.5)
connection_map %>%  setView(0, 0, zoom = 1.5)
connection_map %>%  setView(0, 0, zoom = 1.25)
connection_map %>%  setView(0, 0, zoom = 1.1)
connection_map %>%  setView(0, 0, zoom = 1.3)
connection_map %>%  setView(0, 0, zoom = 1.4)
connection_map %>%  setView(0, 0, zoom = 1.5)
connection_map %>%  setView(0, 0, zoom = 1.45)
connection_map %>%  setView(0, 0, zoom = 1.4)
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map %>% addProviderTiles("Esri.WorldGrayCanvas",
options = providerTileOptions(minZoom=10, maxZoom=18))
connection_map <- leaflet() %>%
addTiles("Esri.WorldGrayCanvas") %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(sf)
library(broom)
library(readxl)
library(rgdal)
library(themis)
library(leaflet)
library(openxlsx)
library(geosphere)
# full_data <- read_csv(file.choose())
# SA3 Shape File
shapefile_df <- readOGR(dsn = paste0(getwd(), "/Data/SA3_2011/")) %>%
fortify(region = "SA3_NAME11") %>%
rename(alat = lat,
along = long,
aname = id)
# World Data Shape File
world_df <- readOGR(
dsn= paste0(getwd(),"/DATA/World_Shapefile/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE) %>% fortify(region = "NAME") %>%
rename(wlat = lat,
wlong = long,
wname = id)
View(world_df)
imported <- file.choose()
virus_list <-  c("Dengue",
"West_Nile_Kunjin",
"Zika",
"Chikungunya",
"Japanese_Encephalitis_Virus")
connection_data <- data.frame()
for(i in 1:5)
{
connection_data <- rbind(connection_data, read_excel(imported, sheet = i) %>%
add_column(Virus = virus_list[i]))
}

knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(sf)
library(broom)
library(readxl)
library(rgdal)
library(tigris)
library(leaflet)
full_data <- read_csv(file.choose())
shapefile <- readOGR(dsn = paste0(getwd(), "/Data/SA3_2011/"))
shapefile_df <- fortify(shapefile, region = "SA3_NAME11")
data_avg_2007 <- full_data %>%
group_by(SA3_NAME_2011, Year) %>%
summarise(mean_incidence_rate = mean(BFV_IRLA)) %>%
filter(Year == "2007")
shapefile_df <- shapefile_df %>%
left_join(. , data_avg_2007, by=c("id"="SA3_NAME_2011"))
# ggplot() +
# geom_path(data = shapefile_df,
#           aes(x = long, y = lat, group = group),
#           color = 'black', fill = 'white', size = .2)
# library(viridis)
# ggplot() +
#   geom_polygon(data = shapefile_df,
#                aes(fill = mean_incidence_rate, x = long, y = lat, group = group)) +
#   theme_void() +
#   scale_fill_viridis(trans = "log", breaks=c(1,5,10,20,50,100)) +
#   coord_map()
# m <- leaflet(shapefile)
leaflet(shapefile) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
# m <- leaflet(shapefile)
leaflet(shapefile) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = "red",
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
View(shapefile_df)
View(shapefile)
shapefile_temp <- shapefile
View(data_avg_2007)
View(shapefile_temp)
?geo_join
View(data_avg_2007)
shapefile_temp <- geo_join(shapefile, data_avg_2007, "SA3_NAME11", "SA3_NAME_2011")
View(shapefile_temp)
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorNumeric("YlOrRd", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorNumeric("Blues", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
fillColor = ~colorNumeric("Blues", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
fillColor = ~colorNumeric("RdYlBu", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
fillColor = ~colorNumeric("Reds", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(shapefile_temp) %>%
addPolygons(weight = 1, smoothFactor = 0.5,
fillColor = ~colorNumeric("Reds", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 0.5, smoothFactor = 1,
fillColor = ~colorNumeric("Reds", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 0.5, smoothFactor = 0,
fillColor = ~colorNumeric("Reds", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
shiny::runApp('ArbovirusesTransmission')
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
fillColor = ~colorNumeric("RdYlBu", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
leaflet(shapefile_temp) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
fillColor = ~colorNumeric("RdYlBu", mean_incidence_rate)(mean_incidence_rate),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
shiny::runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
shiny::runApp('ArbovirusesTransmission')
shiny::runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
shiny::runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
shiny::runApp('ArbovirusesTransmission')
shiny::runApp('ArbovirusesTransmission')
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
full_data <- read_csv(file.choose())
View(full_data)
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
shapefile <- readOGR(dsn = paste0(getwd(), "/../Data/SA3_2011/"))
library(shiny)
library(leaflet)
library(rgdal)
library(tidyverse)
library(tigris)
library(leaflet.extras)
library(shinydashboard)
shapefile <- readOGR(dsn = paste0(getwd(), "/../Data/SA3_2011/"))
getwd()
shapefile <- readOGR(dsn = paste0(getwd(), "/Data/SA3_2011/"))
View(shapefile)
sp_cent <- gCentroid(as(shapefile, "Spatial"), byid = TRUE)
library(sf)
sp_cent <- gCentroid(as(shapefile, "Spatial"), byid = TRUE)
library(rgeos)
sp_cent <- gCentroid(as(shapefile, "Spatial"), byid = TRUE)
library(sf)
sp_cent <- st_centroid(shapefile)
View(shapefile)
get.centroid.bb <- function(x){
N <- length(x)  # Number of polygons
# Initialise data.frame
Centroids.bb <- data.frame(matrix(NA, N, 2, dimnames = list(NULL, c("long", "lat"))))
for(i in 1:N){
# Bounding box of polygon
bb <- bbox(x@polygons[[i]])
# Compute centroid
Centroids.bb[i,] <- c(
0.5 * (bb[1,1] + bb[1,2]),
0.5 * (bb[2,1] + bb[2,2]))
}
return(Centroids.bb)
}
get.centroid.bb(shapefile)
View(shapefile)
View(shapefile)
get.centroid.bb(shapefile) %>% cbind(shapefile$SA3_NAME11)
runApp('ArbovirusesTransmission')
centroid <- get.centroid.bb(shapefile) %>% cbind(shapefile$SA3_NAME11)
centroid <- get.centroid.bb(shapefile) %>% cbind(shapefile$SA3_NAME11)
data <- full_data %>% group_by(SA3_NAME_2011) %>%
summarise(avg_donation_rate = mean(donationrate1000))
?inner_join
View(centroid)
centroid <- get.centroid.bb(shapefile) %>% cbind(shapefile$SA3_NAME11)
colnames(centroid) <- c("long", "lat", "SA3_NAME_2011")
data <- full_data %>% group_by(SA3_NAME_2011) %>%
summarise(avg_donation_rate = mean(donationrate1000))
jojned_data <- inner_join(centroid, data)
View(jojned_data)
runApp('ArbovirusesTransmission')
?full_join
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
unique(full_data$Year)
runApp('ArbovirusesTransmission')
shiny::runApp('ArbovirusesTransmission')
shiny::runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')
runApp('ArbovirusesTransmission')

connection_data <- connection_data %>%
filter(!`Country of Origin` %in% c("No data available", "Overseas - Country unknown",
"At Sea", "Unknown", "No data supplied", "Australia") &
!`Residential location (SA3)` %in% c("No data available", "Overseas - Country unknown",
"At Sea", "No data supplied", "Unknown")) %>%
mutate(`Country of Origin` =
ifelse(`Country of Origin` =="China (excludes SARs and Taiwan)", "China",
ifelse(`Country of Origin` == "Venezuela, Bolivarian Republic of", "Venezuela",
ifelse(`Country of Origin` == "Samoa, American", "Samoa",
ifelse(`Country of Origin` == "Bolivia, Plurinational State of", "Bolivia",
ifelse(`Country of Origin` == "Congo, Democratic Republic of", "Congo",
ifelse(`Country of Origin` == "Macau (SAR of China)", "Macau",
ifelse(`Country of Origin` == "United Kingdom, Channel Islands and Isle of Man", "United Kingdom",
ifelse(`Country of Origin` == "Hong Kong (SAR of China)", "Hong Kong",
ifelse(`Country of Origin` == "Congo, Republic of", "Congo",
ifelse(`Country of Origin` == "Myanmar, The Republic of the Union of", "Myanmar", `Country of Origin`)))))))))))
connection_data <- connection_data[!grepl("nfd|nec", connection_data$`Country of Origin`),]
final_map_data <- connection_data %>%
group_by(Virus, `Country of Origin`) %>%
summarise(count = sum(Count)) %>%
inner_join(. , world_df, by=c("Country of Origin"="wname"))%>%
group_by(Virus, `Country of Origin`) %>%
summarise(wlat = mean(wlat),
wlong = mean(wlong),
count  = mean(count)) %>%
rename(wname = "Country of Origin") %>%
filter(Virus == "Zika")
content <- paste(sep = "<br/>",
"Virus Imported from: ", "<b>", final_map_data$wname, "</b>",
"Type of Virus: ",  "<b>", final_map_data$`Virus`, "</b>",
"Total Imported Cases: ", "<b>", final_map_data$`count`, "</b>")
connection_map <- leaflet() %>%
addTiles("Esri.WorldGrayCanvas") %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addTiles("Jawg.Terrain") %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
connection_map <- leaflet() %>%
addTiles("Jawg.Terrain") %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addTiles("Jawg.Terrain") %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Jawg.Terrain) %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Jawg.Light) %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addTiles() %>%
addProviderTiles("Jawg.Light") %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
#addTiles() %>%
addProviderTiles("Jawg.Light") %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
#addTiles() %>%
addProviderTiles(providers$Stamen.Toner) %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addProviderTiles(providers$Jawg.Terrain) %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addProviderTiles(providers$OpenTopoMap) %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addProviderTiles(providers$Jawg.Terrain) %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map <- leaflet() %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addCircleMarkers(lng=final_map_data$wlong, lat=final_map_data$wlat,
popup=content, radius = 4, opacity = final_map_data$count) %>%
addMarkers(lng = 137, lat = -23.2,
labelOptions = labelOptions(noHide = T))
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.49)
connection_map %>%  setView(0, 0, zoom = 2)
connection_map %>%  setView(0, 0, zoom = 1.6)
connection_map %>%  setView(0, 0, zoom = 1.5)
connection_map %>%  setView(0, 0, zoom = 1.2)
connection_map %>%  setView(0, 0, zoom = 1.4)
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="red")
connection_map %>%  setView(0, 0, zoom = 1.4)
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=3, color="red")
}
connection_map %>%  setView(0, 0, zoom = 1.4)
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=1, color="red")
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=1, color="red")
}
connection_map %>%  setView(0, 0, zoom = 1.4)
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=0.5, color="red")
}
connection_map %>%  setView(0, 0, zoom = 1.4)
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=0.2, color="red")
}
connection_map %>%  setView(0, 0, zoom = 1.4)
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=0.1, color="red")
}
connection_map %>%  setView(0, 0, zoom = 1.4)
for (i in 1:nrow(final_map_data)){
connection_map <- connection_map %>%
addPolylines(lng = c(final_map_data$wlong[i],137),
lat = c(final_map_data$wlat[i],-23.2), weight=1.5, opacity=2, color="pink")
}
connection_map %>%  setView(0, 0, zoom = 1.4)
imported
#imported <- file.choose()
imported <- read_excel("/Users/prachi/Desktop/Internship/Documents/imprted.xlsx")
#full_data <- read_csv(file.choose())
full_data <- read_csv("/Users/prachi/Desktop/Internship/Documents/fulldata.csv")
